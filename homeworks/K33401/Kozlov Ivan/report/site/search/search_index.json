{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u041a\u043e\u0437\u043b\u043e\u0432 \u0418\u0432\u0430\u043d \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447 \u0413\u0440\u0443\u043f\u043f\u0430: \u041a33401 \u041f\u0440\u0435\u0434\u043c\u0435\u0442: \u0411\u0435\u043a-\u044d\u043d\u0434 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u041f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c: \u0414\u043e\u0431\u0440\u044f\u043a\u043e\u0432 \u0414\u0430\u0432\u0438\u0434 \u0418\u043b\u044c\u0438\u0447 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442 \u0418\u0422\u041c\u041e \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2023","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"#_1","text":"","title":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442"},{"location":"hw_1/","text":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0423 \u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 npm, node.js \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f npm-\u043f\u0430\u043a\u0435\u0442\u0430 \u0423 \u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 express \u0423 \u0434\u0430\u043b\u0435\u043d\u0438\u0435 express/\u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0435\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f npm, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c express \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u201cnpm run rme\u201d \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 node (\u043d\u0430 mac) \u0447\u0435\u0440\u0435\u0437 \u0443\u0442\u0438\u043b\u0438\u0442\u0443 brew \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: brew install node \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 node \u0438 npm: \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: npm init \u0422\u0435\u043f\u0435\u0440\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c express \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: npm install express --save \u0422\u0435\u043f\u0435\u0440\u044c \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u043c express \u0438\u0437 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: npm uninstall express --save \u0438\u043b\u0438 npm update express --save \u041f\u0438\u0448\u0435\u043c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 npm run rme \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f express, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u0434\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b package.json: \u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c, \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 express: \u0412\u044b\u0432\u043e\u0434 \u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u043f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043b\u0441\u044f \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 npm.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"hw_1/#no-1","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0423 \u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 npm, node.js \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f npm-\u043f\u0430\u043a\u0435\u0442\u0430 \u0423 \u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 express \u0423 \u0434\u0430\u043b\u0435\u043d\u0438\u0435 express/\u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0435\u0433\u043e \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u0434\u043b\u044f npm, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c express \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u201cnpm run rme\u201d","title":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 1"},{"location":"hw_1/#_1","text":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 node (\u043d\u0430 mac) \u0447\u0435\u0440\u0435\u0437 \u0443\u0442\u0438\u043b\u0438\u0442\u0443 brew \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: brew install node \u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 node \u0438 npm: \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: npm init \u0422\u0435\u043f\u0435\u0440\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c express \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: npm install express --save \u0422\u0435\u043f\u0435\u0440\u044c \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u043c express \u0438\u0437 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: npm uninstall express --save \u0438\u043b\u0438 npm update express --save \u041f\u0438\u0448\u0435\u043c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443 npm run rme \u0434\u043b\u044f \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f express, \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0430\u0434\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b package.json: \u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c, \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0432 express:","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"hw_1/#_2","text":"\u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u043f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043b\u0441\u044f \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c\u0438 npm.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"hw_2/","text":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 2 \u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 ORM Sequelize \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u0440\u043e\u0434\u0443\u043c\u0430\u0442\u044c \u0441\u0432\u043e\u044e \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0438\u0437 CRUD-\u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Express + Sequelize \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id/email \u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b: \u041f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u044f Express + Sequelize \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Express \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Sequelize \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f sequelize-cli \u041f\u0440\u0438\u043c\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u043b\u0430\u043b\u0438 \u043d\u0430 \u043f\u0430\u0440\u0435 \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u043f\u0440\u043e\u043f\u0438\u0448\u0435\u043c \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: npm init npm install express -S npm install sequelize -S npm install --save-dev sequelize-cli npm install nodemon npm install sqlite3 -S \u0421 \u043f\u043e\u043c\u0449\u044c\u044e sequelize-cli \u0434\u0435\u043b\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u0438: npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string,password:string,passport:string npx sequelize-cli db:migrate \u0414\u0430\u043b\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0430\u0439\u043b index.js, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443. index.js const express = require('express') const db = require('./models') const bodyParser = require('body-parser') const cors = require('cors') const app = express() const port = 3333 app.use(cors()) app.use(bodyParser.json()) app.get('/', (req, res) => { res.send('Hello World!') }) app.get('/api/users/:id', async (req, res) => { const user = await db.User.findByPk(req.params.id) console.log('user is', user) if (user) { return res.send(user.toJSON()) } return res.send({\"msg\": \"user is not found\"}) }) app.listen(port, () => { console.log(`Example app listening on port ${port}`) }) app.post('/api/users/', async (req, res) => { try { const user = await db.User.create(req.body); await user.reload(); res.send(user.toJSON()); } catch (e) { return res.send({\"msg\": \"failed to create\"}) } }) app.put('/api/users/:id', async (req, res) => { const user = await db.User.findByPk(req.params.id); if (user) { try { user.update(req.body, {where: {id: req.params.id}}); user.reload(); res.send(user.toJSON()); } catch (e) { return res.send({\"msg\": \"failed to update\"}) } } else { return res.send({\"msg\": \"user is not found\"}) } }) app.delete('/api/users/:id', async (req, res) => { const user = await db.User.destroy({where: {id: req.params.id}}) if (user) { res.send({\"detail\": \"User deleted\"}); } return res.send({\"msg\": \"user is not found\"}) }) \u0422\u0430\u043a\u0436\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 JSON \u0438 CORS: npm install body-parser -S npm install cors -S \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id: \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id: \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id: \u0412\u044b\u0432\u043e\u0434 \u042f \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ORM Sequelize \u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c API \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Express","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"hw_2/#no-2","text":"","title":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 2"},{"location":"hw_2/#_1","text":"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u043f\u0440\u043e\u043f\u0438\u0448\u0435\u043c \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: npm init npm install express -S npm install sequelize -S npm install --save-dev sequelize-cli npm install nodemon npm install sqlite3 -S \u0421 \u043f\u043e\u043c\u0449\u044c\u044e sequelize-cli \u0434\u0435\u043b\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0434\u0435\u043b\u0430\u0435\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u0438: npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string,password:string,passport:string npx sequelize-cli db:migrate \u0414\u0430\u043b\u0435\u0435 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0430\u0439\u043b index.js, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443. index.js const express = require('express') const db = require('./models') const bodyParser = require('body-parser') const cors = require('cors') const app = express() const port = 3333 app.use(cors()) app.use(bodyParser.json()) app.get('/', (req, res) => { res.send('Hello World!') }) app.get('/api/users/:id', async (req, res) => { const user = await db.User.findByPk(req.params.id) console.log('user is', user) if (user) { return res.send(user.toJSON()) } return res.send({\"msg\": \"user is not found\"}) }) app.listen(port, () => { console.log(`Example app listening on port ${port}`) }) app.post('/api/users/', async (req, res) => { try { const user = await db.User.create(req.body); await user.reload(); res.send(user.toJSON()); } catch (e) { return res.send({\"msg\": \"failed to create\"}) } }) app.put('/api/users/:id', async (req, res) => { const user = await db.User.findByPk(req.params.id); if (user) { try { user.update(req.body, {where: {id: req.params.id}}); user.reload(); res.send(user.toJSON()); } catch (e) { return res.send({\"msg\": \"failed to update\"}) } } else { return res.send({\"msg\": \"user is not found\"}) } }) app.delete('/api/users/:id', async (req, res) => { const user = await db.User.destroy({where: {id: req.params.id}}) if (user) { res.send({\"detail\": \"User deleted\"}); } return res.send({\"msg\": \"user is not found\"}) }) \u0422\u0430\u043a\u0436\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 JSON \u0438 CORS: npm install body-parser -S npm install cors -S","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"hw_2/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id: \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id: \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id:","title":"\u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"hw_2/#_3","text":"\u042f \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ORM Sequelize \u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c API \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Express","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"hw_3/","text":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 Makefile, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448\u0438 \u0440\u0443\u0442\u0438\u043d\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a: \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 sequelize; \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f; \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: npm init \u0414\u0430\u043b\u0435\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c make \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: npm install make -S \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c makefile \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: touch Makefile MakeFile \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 sequelize; \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f; \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0412\u044b\u0432\u043e\u0434 \u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b MakeFile, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0440\u0443\u0442\u0438\u043d\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"hw_3/#no-3","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 Makefile, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448\u0438 \u0440\u0443\u0442\u0438\u043d\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a: \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 sequelize; \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f; \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 3"},{"location":"hw_3/#_1","text":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: npm init \u0414\u0430\u043b\u0435\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c make \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: npm install make -S \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c makefile \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: touch Makefile","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"hw_3/#makefile","text":"\u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0447\u0435\u0440\u0435\u0437 sequelize; \u0437\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f; \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u0438 \u0441\u0431\u043e\u0440\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f.","title":"MakeFile"},{"location":"hw_3/#_2","text":"\u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b MakeFile, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0440\u0443\u0442\u0438\u043d\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"hw_4_5/","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API \u0438\u0437 \u041b\u04202 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Postman. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API. \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u044b \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412\u044b\u0432\u043e\u0434 \u0412 \u0445\u043e\u0434\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Postman.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164-5"},{"location":"hw_4_5/#api-2-postman-api","text":"","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API \u0438\u0437 \u041b\u04202 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Postman. \u0422\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 API."},{"location":"hw_4_5/#_1","text":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u044b.","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0438 \u0442\u0435\u0441\u0442\u044b"},{"location":"hw_4_5/#_2","text":"\u0412 \u0445\u043e\u0434\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Postman.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"lr_1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0432\u043e\u0439 boilerplate \u043d\u0430 express + sequelize / TypeORM + typescript. \u0414\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u044f\u0432\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430: \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0440\u043e\u0443\u0442\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u201c\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439\u201d) \u043f\u0440\u0438\u043c\u0435\u0440 \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 boilerplate \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0412 \u0444\u0430\u0439\u043b\u0435 package.json \u0431\u044b\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0441\u043e\u0442\u0438: { \"name\": \"lr_1\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"bcrypt\": \"^5.1.0\", \"body-parser\": \"^1.20.2\", \"cors\": \"^2.8.5\", \"express\": \"^4.18.2\", \"passport\": \"^0.6.0\", \"passport-jwt\": \"^4.0.1\", \"reflect-metadata\": \"^0.1.13\", \"sequelize\": \"^6.30.0\", \"sequelize-typescript\": \"^2.1.5\", \"sequelize-typescript-migration-v2\": \"^0.0.2-beta.6\", \"sqlite3\": \"^5.1.6\", \"tcs\": \"^10.0.2\", \"typeorm\": \"^0.3.13\", \"uuid\": \"^9.0.0\" }, \"devDependencies\": { \"@types/bcrypt\": \"^5.0.0\", \"@types/cors\": \"^2.8.13\", \"@types/dotenv\": \"^8.2.0\", \"@types/express\": \"^4.17.17\", \"@types/express-session\": \"^1.17.7\", \"@types/flat\": \"^5.0.2\", \"@types/node\": \"^18.15.11\", \"@types/passport\": \"^1.0.12\", \"@types/passport-jwt\": \"^3.0.8\", \"@types/styled-components\": \"^5.1.26\", \"@types/styled-system\": \"^5.1.16\", \"@types/uuid\": \"^9.0.1\", \"@types/validator\": \"^13.7.14\", \"@typescript-eslint/eslint-plugin\": \"^5.57.1\", \"@typescript-eslint/parser\": \"^5.57.1\", \"dotenv\": \"^16.0.3\", \"eslint\": \"^8.38.0\", \"express-list-endpoints\": \"^6.0.0\", \"nodemon\": \"^2.0.22\", \"sequelize-cli\": \"^6.6.0\", \"ts-node\": \"^10.9.1\", \"typescript\": \"^5.0.4\" } } \u0424\u0430\u0439\u043b\u044b \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 .env - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f #DATABASE NAME=db DIALECT=sqlite USERNAME=root PASSWORD=null STORAGE=db.sqlite DATABASE_DEVELOPMENT=database_development DATABASE_TEST=database_test DATABASE_PRODUCTION=database_production # JWT ACCESS_TOKEN_LIFETIME=3000000 # in milliseconds REFRESH_TOKEN_LIFETIME=36000000 # in milliseconds # SERVER PORT=9090 HOST=127.0.0.1 .eslintignore - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0435\u0440\u0438\u043a\u0442\u043e\u0440\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u043c node_modules dist .eslintrc.js - \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f ESLint module.exports = { \"env\": { \"browser\": true, \"es2021\": true }, \"extends\": [ \"eslint:recommended\", \"plugin:@typescript-eslint/recommended\" ], \"overrides\": [ ], \"parser\": \"@typescript-eslint/parser\", \"parserOptions\": { \"ecmaVersion\": \"latest\", \"sourceType\": \"module\" }, \"plugins\": [ \"@typescript-eslint\" ], \"rules\": { } } .sequelizerc - \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f sequelize const path = require('path') module.exports = { 'config': path.resolve('src', 'configs/db.mjs'), 'models-path': path.resolve('src', 'models'), 'migrations-path': path.resolve('src', 'migrations'), 'seeders-path': path.resolve('src', 'seeders') } nodemon.json - \u044d\u0442\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u043f\u0430\u043a\u0435\u0442\u0430 nodemon { \"watch\": [ \"src\" ], \"ext\": \"ts\", \"ignore\": [ \"node_modules\", \"src/**/*.spec.ts\" ], \"exec\": \"ts-node ./src/index.ts\" } tsconfig.json - \u044d\u0442\u043e \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 TypeScript, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440\u0430 TypeScript { \"compilerOptions\": { \"target\": \"es6\", \"module\": \"commonjs\", \"outDir\": \"./dist\", \"strict\": true, \"esModuleInterop\": true, \"strictPropertyInitialization\": false, \"experimentalDecorators\": true, \"emitDecoratorMetadata\": true, \"allowJs\": true, }, \"include\": [ \"./src/**/*\" ], \"exclude\": [ \"node_modules\" ] } \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 src configs - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. controllers - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. core - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u044f\u0434\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Express. index.ts - \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. middlewares - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Passport.js. migrations - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. models - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432. providers - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. routes - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430 API, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. seeders - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. services - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0443\u0436\u0431\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043b\u0443\u0436\u0431\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. utils - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0443\u0442\u0438\u043b\u0438\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. src/ \u251c\u2500\u2500 configs \u2502 \u2514\u2500\u2500 db.mjs \u251c\u2500\u2500 controllers \u2502 \u2514\u2500\u2500 users \u2502 \u2514\u2500\u2500 User.ts \u251c\u2500\u2500 core \u2502 \u2514\u2500\u2500 index.ts \u251c\u2500\u2500 index.ts \u251c\u2500\u2500 middlewares \u2502 \u2514\u2500\u2500 passport.ts \u251c\u2500\u2500 migrations \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2514\u2500\u2500 RefreshToken.ts \u2502 \u2514\u2500\u2500 users \u2502 \u2514\u2500\u2500 User.ts \u251c\u2500\u2500 providers \u2502 \u2514\u2500\u2500 db.ts \u251c\u2500\u2500 routes \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 index.ts \u2502 \u2514\u2500\u2500 users \u2502 \u2514\u2500\u2500 User.ts \u251c\u2500\u2500 seeders \u251c\u2500\u2500 services \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2514\u2500\u2500 RefreshToken.ts \u2502 \u2514\u2500\u2500 users \u2502 \u2514\u2500\u2500 User.ts \u2514\u2500\u2500 utils \u251c\u2500\u2500 checkPassword.ts \u2514\u2500\u2500 hashPassword.ts \u041c\u043e\u0434\u0435\u043b\u0438 User.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f import { AllowNull, BeforeCreate, BeforeUpdate, Column, Model, Table, Unique } from 'sequelize-typescript' import hashPassword from '../../utils/hashPassword' @Table class User extends Model { @AllowNull(false) @Column firstName: string @AllowNull(false) @Column lastName: string @Unique @Column email: string @AllowNull(false) @Column password: string @BeforeCreate @BeforeUpdate static generatePasswordHash(instance: User) { const { password } = instance if (instance.changed('password')) { instance.password = hashPassword(password) } } } export default User RefreshToken.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432 import { Table, Column, Model, Unique, AllowNull, ForeignKey } from 'sequelize-typescript' import User from '../users/User' @Table class RefreshToken extends Model { @Unique @AllowNull(false) @Column token: string @ForeignKey(() => User) @Column userId: number } export default RefreshToken \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b (routes) src/routes/users/User.ts - \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f import express from \"express\" import UserController from \"../../../controllers/users/User\" import passport from \"../../../middlewares/passport\" const router: express.Router = express.Router() const controller: UserController = new UserController() router.route('/').post(controller.post) router.route('/h').get(controller.hello) router.route('/profile').get(passport.authenticate('jwt', { session: false }), controller.me) router.route('/profile/:id').get(controller.get) router.route('/login').post(controller.auth) router.route('/refresh').post(controller.refreshToken) router.route('/create').post(controller.create) export default router src/routes/index.ts - export import express from \"express\" import userRoutes from \"./users/User\" const router: express.Router = express.Router() router.use('/users', userRoutes) export default router \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u041c\u0435\u0442\u043e\u0434\u044b \u043a\u043b\u0430\u0441\u0441\u0430 UserController: get : \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 getById \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 UserService, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0432 \u043e\u0442\u0432\u0435\u0442. post : \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 create \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 UserService, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0432 \u043e\u0442\u0432\u0435\u0442. me : \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. auth : \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u0438\u0437 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 checkPassword \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 UserService \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0438 \u0442\u043e\u043a\u0435\u043d \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435. refreshToken : \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0437 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 isRefreshTokenExpired \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 RefreshTokenService, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0438 \u0442\u043e\u043a\u0435\u043d \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f jsonwebtoken \u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 RefreshTokenService, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438. create : \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0445\u0435\u0448\u0438\u0440\u0443\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e hashPassword, \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 create \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 UserService, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0432 \u043e\u0442\u0432\u0435\u0442. src/controllers/users/User.ts import jwt from 'jsonwebtoken' import { jwtOptions } from '../../middlewares/passport' import RefreshTokenService from '../../services/auth/RefreshToken' import UserService from '../../services/users/User' import hashPassword from '../../utils/hashPassword' class UserController { private userService: UserService constructor() { this.userService = new UserService() } get = async (request: any, response: any) => { try { const user = await this.userService.getById( Number(request.params.id) ) response.send(user) } catch (error: any) { response.status(404).send({ \"error\": error.message }) } } post = async (request: any, response: any) => { const { body } = request try { const user = await this.userService.create(body) response.status(201).send(user) } catch (error: any) { response.status(400).send({ \"error\": error.message }) } } me = async (request: any, response: any) => { response.send(request.user) } hello = async (request: any, response: any) => { const html = '<html><body><h1>Hello World!</h1></body></html>'; response.send(html) } auth = async (request: any, response: any) => { const { body } = request const { email, password } = body try { const { user, checkPassword } = await this.userService.checkPassword(email, password) if (checkPassword) { const payload = { id: user.id } console.log('payload is', payload) const accessToken = jwt.sign(payload, jwtOptions.secretOrKey) const refreshTokenService = new RefreshTokenService(user) const refreshToken = await refreshTokenService.generateRefreshToken() response.send({ 'Answer' : `You successfully logged in as ${user.firstName} ${user.lastName}`, accessToken, refreshToken }) } else { throw new Error('Login or password is incorrect!') } } catch (e: any) { response.status(401).send({ \"error\": e.message }) } } refreshToken = async (request: any, response: any) => { const { body } = request const { refreshToken } = body const refreshTokenService = new RefreshTokenService() try { const { userId, isExpired } = await refreshTokenService .isRefreshTokenExpired(refreshToken) if (!isExpired && userId) { const user = await this.userService.getById(userId) const payload = { id: user.id } const accessToken = jwt.sign(payload, jwtOptions.secretOrKey) const refreshTokenService = new RefreshTokenService(user) const refreshToken = await refreshTokenService.generateRefreshToken() response.send({ accessToken, refreshToken }) } else { throw new Error('Invalid credentials') } } catch (e) { response.status(401).send({ 'error': 'Invalid credentials' }) } } create = async (request: any, response: any) => { try { const { body } = request body.password = hashPassword(body.password) const user = await this.userService.create(body) response.status(201).send(user) } catch (error: any) { response.status(400).send({ \"error\": error.message }) } } } export default UserController C\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 src/services/users/User.ts import User from '../../models/users/User' import sequelize from '../../providers/db' import checkPassword from '../../utils/checkPassword' const userRepository = sequelize.getRepository(User) class UserService { async getById(id: number): Promise<User> { const user = await userRepository.findOne({ where: { 'id': id } }) if (user) return user throw new Error(`User with id ${id} not found`) } async create(userData: Partial<User>): Promise<User> { try { const user = await userRepository.create(userData) return user.toJSON() } catch (e: any) { const errors = e.errors.map((error: any) => error.message) throw console.log(errors) } } async checkPassword(email: string, password: string): Promise<any> { const user = await userRepository.findOne({ where: { 'email' : email } }) if (user) return { user: user.toJSON(), checkPassword: checkPassword(user.dataValues, password) } throw console.log('Incorrect login/password!') } } export default UserService src/services/auth/RefreshToken.ts import { randomUUID } from \"crypto\" import dotenv from \"dotenv\" import RefreshToken from '../../models/auth/RefreshToken' import User from '../../models/users/User' dotenv.config() class RefreshTokenService { private user: User | null constructor(user: User | null = null) { this.user = user } generateRefreshToken = async (): Promise<string> => { const token = randomUUID() const userId = this.user?.id await RefreshToken.create({ token, userId }) return token } isRefreshTokenExpired = async (token: string): Promise<{ userId: number | null, isExpired: boolean }> => { const refreshToken = await RefreshToken.findOne({ where: { token } }) if (refreshToken) { const tokenData = refreshToken.toJSON() const currentDate = new Date() const timeDelta = currentDate.getTime() - tokenData.createdAt.getTime() if (timeDelta > 0 && timeDelta < parseInt(process.env.REFRESH_TOKEN_LIFETIME!)) { return { userId: tokenData.userId, isExpired: false } } return { userId: null, isExpired: true } } return { userId: null, isExpired: true } } } export default RefreshTokenService \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0412\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0435\u0441\u043b\u0438 \u043e\u043d \u0432\u043e\u0448\u0435\u043b \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id \u0412\u044b\u0432\u043e\u0434 \u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c. \u0422\u0430\u043a\u043e\u0439 boilerplate \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0431\u044b\u0441\u0442\u0440\u043e \u043d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b, \u0440\u043e\u0443\u0442\u044b \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0435\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435. \u0422\u0430\u043a\u0436\u0435 \u044f \u043f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043b\u0441\u044f \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 sequelize/TypeORM, typescript \u0438 express.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21161"},{"location":"lr_1/#no-1","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0432\u043e\u0439 boilerplate \u043d\u0430 express + sequelize / TypeORM + typescript. \u0414\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u044f\u0432\u043d\u043e\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430: \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0440\u043e\u0443\u0442\u044b \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 (\u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u201c\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439\u201d) \u043f\u0440\u0438\u043c\u0435\u0440","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 1"},{"location":"lr_1/#boilerplate","text":"\u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b:","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 boilerplate"},{"location":"lr_1/#_1","text":"\u0412 \u0444\u0430\u0439\u043b\u0435 package.json \u0431\u044b\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u0441\u043e\u0442\u0438: { \"name\": \"lr_1\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": { \"bcrypt\": \"^5.1.0\", \"body-parser\": \"^1.20.2\", \"cors\": \"^2.8.5\", \"express\": \"^4.18.2\", \"passport\": \"^0.6.0\", \"passport-jwt\": \"^4.0.1\", \"reflect-metadata\": \"^0.1.13\", \"sequelize\": \"^6.30.0\", \"sequelize-typescript\": \"^2.1.5\", \"sequelize-typescript-migration-v2\": \"^0.0.2-beta.6\", \"sqlite3\": \"^5.1.6\", \"tcs\": \"^10.0.2\", \"typeorm\": \"^0.3.13\", \"uuid\": \"^9.0.0\" }, \"devDependencies\": { \"@types/bcrypt\": \"^5.0.0\", \"@types/cors\": \"^2.8.13\", \"@types/dotenv\": \"^8.2.0\", \"@types/express\": \"^4.17.17\", \"@types/express-session\": \"^1.17.7\", \"@types/flat\": \"^5.0.2\", \"@types/node\": \"^18.15.11\", \"@types/passport\": \"^1.0.12\", \"@types/passport-jwt\": \"^3.0.8\", \"@types/styled-components\": \"^5.1.26\", \"@types/styled-system\": \"^5.1.16\", \"@types/uuid\": \"^9.0.1\", \"@types/validator\": \"^13.7.14\", \"@typescript-eslint/eslint-plugin\": \"^5.57.1\", \"@typescript-eslint/parser\": \"^5.57.1\", \"dotenv\": \"^16.0.3\", \"eslint\": \"^8.38.0\", \"express-list-endpoints\": \"^6.0.0\", \"nodemon\": \"^2.0.22\", \"sequelize-cli\": \"^6.6.0\", \"ts-node\": \"^10.9.1\", \"typescript\": \"^5.0.4\" } }","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438"},{"location":"lr_1/#_2","text":".env - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f #DATABASE NAME=db DIALECT=sqlite USERNAME=root PASSWORD=null STORAGE=db.sqlite DATABASE_DEVELOPMENT=database_development DATABASE_TEST=database_test DATABASE_PRODUCTION=database_production # JWT ACCESS_TOKEN_LIFETIME=3000000 # in milliseconds REFRESH_TOKEN_LIFETIME=36000000 # in milliseconds # SERVER PORT=9090 HOST=127.0.0.1 .eslintignore - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0435\u0440\u0438\u043a\u0442\u043e\u0440\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043b\u0438\u043d\u0442\u0435\u0440\u043e\u043c node_modules dist .eslintrc.js - \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f ESLint module.exports = { \"env\": { \"browser\": true, \"es2021\": true }, \"extends\": [ \"eslint:recommended\", \"plugin:@typescript-eslint/recommended\" ], \"overrides\": [ ], \"parser\": \"@typescript-eslint/parser\", \"parserOptions\": { \"ecmaVersion\": \"latest\", \"sourceType\": \"module\" }, \"plugins\": [ \"@typescript-eslint\" ], \"rules\": { } } .sequelizerc - \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f sequelize const path = require('path') module.exports = { 'config': path.resolve('src', 'configs/db.mjs'), 'models-path': path.resolve('src', 'models'), 'migrations-path': path.resolve('src', 'migrations'), 'seeders-path': path.resolve('src', 'seeders') } nodemon.json - \u044d\u0442\u043e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u043f\u0430\u043a\u0435\u0442\u0430 nodemon { \"watch\": [ \"src\" ], \"ext\": \"ts\", \"ignore\": [ \"node_modules\", \"src/**/*.spec.ts\" ], \"exec\": \"ts-node ./src/index.ts\" } tsconfig.json - \u044d\u0442\u043e \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 TypeScript, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0442\u043e\u0440\u0430 TypeScript { \"compilerOptions\": { \"target\": \"es6\", \"module\": \"commonjs\", \"outDir\": \"./dist\", \"strict\": true, \"esModuleInterop\": true, \"strictPropertyInitialization\": false, \"experimentalDecorators\": true, \"emitDecoratorMetadata\": true, \"allowJs\": true, }, \"include\": [ \"./src/**/*\" ], \"exclude\": [ \"node_modules\" ] }","title":"\u0424\u0430\u0439\u043b\u044b \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438"},{"location":"lr_1/#src","text":"configs - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. controllers - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. core - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u044f\u0434\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Express. index.ts - \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. middlewares - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Passport.js. migrations - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. models - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432. providers - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. routes - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430 API, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. seeders - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. services - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0443\u0436\u0431\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043b\u0443\u0436\u0431\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f. utils - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0443\u0442\u0438\u043b\u0438\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. src/ \u251c\u2500\u2500 configs \u2502 \u2514\u2500\u2500 db.mjs \u251c\u2500\u2500 controllers \u2502 \u2514\u2500\u2500 users \u2502 \u2514\u2500\u2500 User.ts \u251c\u2500\u2500 core \u2502 \u2514\u2500\u2500 index.ts \u251c\u2500\u2500 index.ts \u251c\u2500\u2500 middlewares \u2502 \u2514\u2500\u2500 passport.ts \u251c\u2500\u2500 migrations \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2514\u2500\u2500 RefreshToken.ts \u2502 \u2514\u2500\u2500 users \u2502 \u2514\u2500\u2500 User.ts \u251c\u2500\u2500 providers \u2502 \u2514\u2500\u2500 db.ts \u251c\u2500\u2500 routes \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 index.ts \u2502 \u2514\u2500\u2500 users \u2502 \u2514\u2500\u2500 User.ts \u251c\u2500\u2500 seeders \u251c\u2500\u2500 services \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2514\u2500\u2500 RefreshToken.ts \u2502 \u2514\u2500\u2500 users \u2502 \u2514\u2500\u2500 User.ts \u2514\u2500\u2500 utils \u251c\u2500\u2500 checkPassword.ts \u2514\u2500\u2500 hashPassword.ts","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 src"},{"location":"lr_1/#_3","text":"User.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f import { AllowNull, BeforeCreate, BeforeUpdate, Column, Model, Table, Unique } from 'sequelize-typescript' import hashPassword from '../../utils/hashPassword' @Table class User extends Model { @AllowNull(false) @Column firstName: string @AllowNull(false) @Column lastName: string @Unique @Column email: string @AllowNull(false) @Column password: string @BeforeCreate @BeforeUpdate static generatePasswordHash(instance: User) { const { password } = instance if (instance.changed('password')) { instance.password = hashPassword(password) } } } export default User RefreshToken.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432 import { Table, Column, Model, Unique, AllowNull, ForeignKey } from 'sequelize-typescript' import User from '../users/User' @Table class RefreshToken extends Model { @Unique @AllowNull(false) @Column token: string @ForeignKey(() => User) @Column userId: number } export default RefreshToken","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lr_1/#routes","text":"src/routes/users/User.ts - \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f import express from \"express\" import UserController from \"../../../controllers/users/User\" import passport from \"../../../middlewares/passport\" const router: express.Router = express.Router() const controller: UserController = new UserController() router.route('/').post(controller.post) router.route('/h').get(controller.hello) router.route('/profile').get(passport.authenticate('jwt', { session: false }), controller.me) router.route('/profile/:id').get(controller.get) router.route('/login').post(controller.auth) router.route('/refresh').post(controller.refreshToken) router.route('/create').post(controller.create) export default router src/routes/index.ts - export import express from \"express\" import userRoutes from \"./users/User\" const router: express.Router = express.Router() router.use('/users', userRoutes) export default router","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b (routes)"},{"location":"lr_1/#_4","text":"\u041c\u0435\u0442\u043e\u0434\u044b \u043a\u043b\u0430\u0441\u0441\u0430 UserController: get : \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 getById \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 UserService, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0432 \u043e\u0442\u0432\u0435\u0442. post : \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 create \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 UserService, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0432 \u043e\u0442\u0432\u0435\u0442. me : \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. auth : \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u0438\u0437 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 checkPassword \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 UserService \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u044f, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0438 \u0442\u043e\u043a\u0435\u043d \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435. refreshToken : \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u043e\u043a\u0435\u043d \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0437 \u0442\u0435\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 isRefreshTokenExpired \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 RefreshTokenService, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0438 \u0442\u043e\u043a\u0435\u043d \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f jsonwebtoken \u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 RefreshTokenService, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u0441 \u043d\u043e\u0432\u044b\u043c\u0438 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438. create : \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u0445\u0435\u0448\u0438\u0440\u0443\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044e hashPassword, \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 create \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 UserService, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0432 \u043e\u0442\u0432\u0435\u0442. src/controllers/users/User.ts import jwt from 'jsonwebtoken' import { jwtOptions } from '../../middlewares/passport' import RefreshTokenService from '../../services/auth/RefreshToken' import UserService from '../../services/users/User' import hashPassword from '../../utils/hashPassword' class UserController { private userService: UserService constructor() { this.userService = new UserService() } get = async (request: any, response: any) => { try { const user = await this.userService.getById( Number(request.params.id) ) response.send(user) } catch (error: any) { response.status(404).send({ \"error\": error.message }) } } post = async (request: any, response: any) => { const { body } = request try { const user = await this.userService.create(body) response.status(201).send(user) } catch (error: any) { response.status(400).send({ \"error\": error.message }) } } me = async (request: any, response: any) => { response.send(request.user) } hello = async (request: any, response: any) => { const html = '<html><body><h1>Hello World!</h1></body></html>'; response.send(html) } auth = async (request: any, response: any) => { const { body } = request const { email, password } = body try { const { user, checkPassword } = await this.userService.checkPassword(email, password) if (checkPassword) { const payload = { id: user.id } console.log('payload is', payload) const accessToken = jwt.sign(payload, jwtOptions.secretOrKey) const refreshTokenService = new RefreshTokenService(user) const refreshToken = await refreshTokenService.generateRefreshToken() response.send({ 'Answer' : `You successfully logged in as ${user.firstName} ${user.lastName}`, accessToken, refreshToken }) } else { throw new Error('Login or password is incorrect!') } } catch (e: any) { response.status(401).send({ \"error\": e.message }) } } refreshToken = async (request: any, response: any) => { const { body } = request const { refreshToken } = body const refreshTokenService = new RefreshTokenService() try { const { userId, isExpired } = await refreshTokenService .isRefreshTokenExpired(refreshToken) if (!isExpired && userId) { const user = await this.userService.getById(userId) const payload = { id: user.id } const accessToken = jwt.sign(payload, jwtOptions.secretOrKey) const refreshTokenService = new RefreshTokenService(user) const refreshToken = await refreshTokenService.generateRefreshToken() response.send({ accessToken, refreshToken }) } else { throw new Error('Invalid credentials') } } catch (e) { response.status(401).send({ 'error': 'Invalid credentials' }) } } create = async (request: any, response: any) => { try { const { body } = request body.password = hashPassword(body.password) const user = await this.userService.create(body) response.status(201).send(user) } catch (error: any) { response.status(400).send({ \"error\": error.message }) } } } export default UserController","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b"},{"location":"lr_1/#c","text":"src/services/users/User.ts import User from '../../models/users/User' import sequelize from '../../providers/db' import checkPassword from '../../utils/checkPassword' const userRepository = sequelize.getRepository(User) class UserService { async getById(id: number): Promise<User> { const user = await userRepository.findOne({ where: { 'id': id } }) if (user) return user throw new Error(`User with id ${id} not found`) } async create(userData: Partial<User>): Promise<User> { try { const user = await userRepository.create(userData) return user.toJSON() } catch (e: any) { const errors = e.errors.map((error: any) => error.message) throw console.log(errors) } } async checkPassword(email: string, password: string): Promise<any> { const user = await userRepository.findOne({ where: { 'email' : email } }) if (user) return { user: user.toJSON(), checkPassword: checkPassword(user.dataValues, password) } throw console.log('Incorrect login/password!') } } export default UserService src/services/auth/RefreshToken.ts import { randomUUID } from \"crypto\" import dotenv from \"dotenv\" import RefreshToken from '../../models/auth/RefreshToken' import User from '../../models/users/User' dotenv.config() class RefreshTokenService { private user: User | null constructor(user: User | null = null) { this.user = user } generateRefreshToken = async (): Promise<string> => { const token = randomUUID() const userId = this.user?.id await RefreshToken.create({ token, userId }) return token } isRefreshTokenExpired = async (token: string): Promise<{ userId: number | null, isExpired: boolean }> => { const refreshToken = await RefreshToken.findOne({ where: { token } }) if (refreshToken) { const tokenData = refreshToken.toJSON() const currentDate = new Date() const timeDelta = currentDate.getTime() - tokenData.createdAt.getTime() if (timeDelta > 0 && timeDelta < parseInt(process.env.REFRESH_TOKEN_LIFETIME!)) { return { userId: tokenData.userId, isExpired: false } } return { userId: null, isExpired: true } } return { userId: null, isExpired: true } } } export default RefreshTokenService","title":"C\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438"},{"location":"lr_1/#_5","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0412\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0435\u0441\u043b\u0438 \u043e\u043d \u0432\u043e\u0448\u0435\u043b \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e id","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr_1/#_6","text":"\u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c. \u0422\u0430\u043a\u043e\u0439 boilerplate \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0431\u044b\u0441\u0442\u0440\u043e \u043d\u0430\u0447\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044b. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b, \u0440\u043e\u0443\u0442\u044b \u0438 \u0441\u0435\u0440\u0432\u0438\u0441\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0438 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0431\u0435\u0437 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u043d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435. \u0422\u0430\u043a\u0436\u0435 \u044f \u043f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043b\u0441\u044f \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 sequelize/TypeORM, typescript \u0438 express.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"lr_2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0412\u0430\u043c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432. \u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u044b\u043c \u043d\u0430 \u0432\u0435\u0441\u044c \u043a\u0443\u0440\u0441 \u0438 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442\u0430\u0445. \u041f\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c\u0443 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c RESTful API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 express + typescript (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 boilerplate). \u0412\u0430\u0440\u0438\u0430\u043d\u0442 4: \u0421\u0430\u0439\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u0412\u0445\u043e\u0434 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0423\u0447\u0451\u0442 \u0442\u043e\u0432\u0430\u0440\u0430 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0435 \u0413\u0440\u0430\u0444\u0438\u043a\u0438 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u043c \u0442\u0435\u0445 \u0438\u043b\u0438 \u0438\u043d\u044b\u0445 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u043c\u0438 \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 src configs - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. controllers - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. core - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u044f\u0434\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Express. index.ts - \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. middlewares - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Passport.js. migrations - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. models - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432, \u0442\u043e\u0432\u0430\u0440\u043e\u0432. providers - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. routes - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430 API, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. seeders - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. services - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0443\u0436\u0431\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043b\u0443\u0436\u0431\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432, \u0442\u043e\u0432\u0430\u0440\u043e\u0432. utils - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0443\u0442\u0438\u043b\u0438\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. . \u251c\u2500\u2500 configs \u2502 \u2514\u2500\u2500 db.mjs \u251c\u2500\u2500 controllers \u2502 \u251c\u2500\u2500 goods \u2502 \u2502 \u2514\u2500\u2500 Goods.ts \u2502 \u251c\u2500\u2500 users \u2502 \u2502 \u2514\u2500\u2500 User.ts \u2502 \u2514\u2500\u2500 workers \u2502 \u2514\u2500\u2500 Workers.ts \u251c\u2500\u2500 core \u2502 \u2514\u2500\u2500 index.ts \u251c\u2500\u2500 index.ts \u251c\u2500\u2500 middlewares \u2502 \u2514\u2500\u2500 passport.ts \u251c\u2500\u2500 migrations \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2514\u2500\u2500 RefreshToken.ts \u2502 \u251c\u2500\u2500 goods \u2502 \u2502 \u2514\u2500\u2500 Goods.ts \u2502 \u251c\u2500\u2500 users \u2502 \u2502 \u2514\u2500\u2500 User.ts \u2502 \u2514\u2500\u2500 workers \u2502 \u2514\u2500\u2500 Workers.ts \u251c\u2500\u2500 providers \u2502 \u2514\u2500\u2500 db.ts \u251c\u2500\u2500 routes \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 goods \u2502 \u2502 \u2514\u2500\u2500 Goods.ts \u2502 \u251c\u2500\u2500 index.ts \u2502 \u251c\u2500\u2500 users \u2502 \u2502 \u2514\u2500\u2500 User.ts \u2502 \u2514\u2500\u2500 workers \u2502 \u2514\u2500\u2500 Workers.ts \u251c\u2500\u2500 seeders \u251c\u2500\u2500 services \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2514\u2500\u2500 RefreshToken.ts \u2502 \u251c\u2500\u2500 goods \u2502 \u2502 \u2514\u2500\u2500 Goods.ts \u2502 \u251c\u2500\u2500 users \u2502 \u2502 \u2514\u2500\u2500 User.ts \u2502 \u2514\u2500\u2500 workers \u2502 \u2514\u2500\u2500 Workers.ts \u2514\u2500\u2500 utils \u251c\u2500\u2500 checkPassword.ts \u2514\u2500\u2500 hashPassword.ts \u041c\u043e\u0434\u0435\u043b\u0438 User.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f import { AllowNull, BeforeCreate, BeforeUpdate, Column, Model, Table, Unique } from 'sequelize-typescript' import hashPassword from '../../utils/hashPassword' @Table class User extends Model { @AllowNull(false) @Column firstName: string @AllowNull(false) @Column lastName: string @Unique @Column email: string @AllowNull(false) @Column password: string @BeforeCreate @BeforeUpdate static generatePasswordHash(instance: User) { const { password } = instance if (instance.changed('password')) { instance.password = hashPassword(password) } } } export default User RefreshToken.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432 import { Table, Column, Model, Unique, AllowNull, ForeignKey } from 'sequelize-typescript' import User from '../users/User' @Table class RefreshToken extends Model { @Unique @AllowNull(false) @Column token: string @ForeignKey(() => User) @Column userId: number } export default RefreshToken Workers.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 import { AllowNull, Column, Model, Table, Unique } from 'sequelize-typescript'; @Table class Worker extends Model { @AllowNull(false) @Unique @Column passport: string; @AllowNull(false) @Column name: string; @AllowNull(false) @Column position: string; @AllowNull(false) @Column salary: number; } export default Worker; Goods.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u0442\u043e\u0432\u0430\u0440\u043e\u0432 import { AllowNull, Column, Model, Table, Unique } from 'sequelize-typescript' @Table class Goods extends Model { @AllowNull(false) @Unique @Column articul: string @AllowNull(false) @Column count: number @AllowNull(false) @Column name: string } export default Goods C\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 src/services/users/User.ts import User from '../../models/users/User' import sequelize from '../../providers/db' import checkPassword from '../../utils/checkPassword' const userRepository = sequelize.getRepository(User) class UserService { async getById(id: number): Promise<User> { const user = await userRepository.findOne({ where: { 'id': id } }) if (user) return user throw new Error(`User with id ${id} not found`) } async create(userData: Partial<User>): Promise<User> { try { const user = await userRepository.create(userData) return user.toJSON() } catch (e: any) { const errors = e.errors.map((error: any) => error.message) throw console.log(errors) } } async checkPassword(email: string, password: string): Promise<any> { const user = await userRepository.findOne({ where: { 'email' : email } }) if (user) return { user: user.toJSON(), checkPassword: checkPassword(user.dataValues, password) } throw console.log('Incorrect login/password!') } } export default UserService src/services/auth/RefreshToken.ts import { randomUUID } from \"crypto\" import dotenv from \"dotenv\" import RefreshToken from '../../models/auth/RefreshToken' import User from '../../models/users/User' dotenv.config() class RefreshTokenService { private user: User | null constructor(user: User | null = null) { this.user = user } generateRefreshToken = async (): Promise<string> => { const token = randomUUID() const userId = this.user?.id await RefreshToken.create({ token, userId }) return token } isRefreshTokenExpired = async (token: string): Promise<{ userId: number | null, isExpired: boolean }> => { const refreshToken = await RefreshToken.findOne({ where: { token } }) if (refreshToken) { const tokenData = refreshToken.toJSON() const currentDate = new Date() const timeDelta = currentDate.getTime() - tokenData.createdAt.getTime() if (timeDelta > 0 && timeDelta < parseInt(process.env.REFRESH_TOKEN_LIFETIME!)) { return { userId: tokenData.userId, isExpired: false } } return { userId: null, isExpired: true } } return { userId: null, isExpired: true } } } export default RefreshTokenService src/services/goods/Goods.ts import Goods from '../../models/goods/Goods' import sequelize from '../../providers/db' const goodsRepository = sequelize.getRepository(Goods) class GoodsService { async getById(id: number): Promise<Goods> { const goods = await goodsRepository.findOne({ where: { 'articul': id } }) if (goods) return goods throw new Error(`Goods with id ${id} not found`) } async create(goodsData: Partial<Goods>): Promise<Goods> { try { const goods = await goodsRepository.create(goodsData) return goods.toJSON() } catch (e: any) { const errors = e.errors.map((error: any) => error.message) throw console.log(errors) } } async update(id: number, goodsData: Partial<Goods>): Promise<Goods> { try { const goods = await goodsRepository.findOne({ where: { 'articul': id } }) if (goods) { await goods.update(goodsData) return goods.toJSON() } throw new Error(`Goods with id ${id} not found`) } catch (e: any) { const errors = e.errors.map((error: any) => error.message) throw console.log(errors) } } async delete(id: number): Promise<void> { const goods = await goodsRepository.findOne({ where: { 'articul': id } }) if (goods) { await goods.destroy() return } throw new Error(`Goods with id ${id} not found`) } async getCountGoods(): Promise<any> { const result = await goodsRepository.findAll({ attributes: ['name', [sequelize.fn('SUM', sequelize.col('count')), 'total_count']], group: ['name'] }); return result; } } export default GoodsService src/services/workers/Workers.ts import Worker from '../../models/workers/Workers'; import sequelize from '../../providers/db'; const workersRepository = sequelize.getRepository(Worker); class WorkersService { async get(id: number): Promise<Worker> { const worker = await workersRepository.findOne({ where: { 'id': id } }); if (worker) return worker throw new Error(`Worker with id ${id} not found`); } async create(workerData: Partial<Worker>): Promise<Worker> { try { const worker = await workersRepository.create(workerData); return worker.toJSON(); } catch (e: any) { const errors = e.errors.map((error: any) => error.message); throw console.log(errors); } } async update(id: number, workerData: Partial<Worker>): Promise<Worker> { try { const worker = await workersRepository.findOne({ where: { id } }); if (worker) { await worker.update(workerData); return worker.toJSON(); } throw new Error(`Worker with id ${id} not found`); } catch (e: any) { const errors = e.errors.map((error: any) => error.message); throw console.log(errors); } } async delete(id: number): Promise<void> { const worker = await workersRepository.findOne({ where: { id } }); if (worker) { await worker.destroy(); return; } throw new Error(`Worker with id ${id} not found`); } } export default WorkersService; \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b UserController import jwt from 'jsonwebtoken' import { jwtOptions } from '../../middlewares/passport' import RefreshTokenService from '../../services/auth/RefreshToken' import UserService from '../../services/users/User' import hashPassword from '../../utils/hashPassword' class UserController { private userService: UserService constructor() { this.userService = new UserService() } get = async (request: any, response: any) => { try { const user = await this.userService.getById( Number(request.params.id) ) response.send(user) } catch (error: any) { response.status(404).send({ \"error\": error.message }) } } post = async (request: any, response: any) => { const { body } = request try { const user = await this.userService.create(body) response.status(201).send(user) } catch (error: any) { response.status(400).send({ \"error\": error.message }) } } me = async (request: any, response: any) => { response.send(request.user) } hello = async (request: any, response: any) => { const html = '<html><body><h1>Hello World!</h1></body></html>'; response.send(html) } auth = async (request: any, response: any) => { const { body } = request const { email, password } = body try { const { user, checkPassword } = await this.userService.checkPassword(email, password) if (checkPassword) { const payload = { id: user.id } console.log('payload is', payload) const accessToken = jwt.sign(payload, jwtOptions.secretOrKey) const refreshTokenService = new RefreshTokenService(user) const refreshToken = await refreshTokenService.generateRefreshToken() response.send({ 'Answer' : `You successfully logged in as ${user.firstName} ${user.lastName}`, accessToken, refreshToken }) } else { throw new Error('Login or password is incorrect!') } } catch (e: any) { response.status(401).send({ \"error\": e.message }) } } refreshToken = async (request: any, response: any) => { const { body } = request const { refreshToken } = body const refreshTokenService = new RefreshTokenService() try { const { userId, isExpired } = await refreshTokenService .isRefreshTokenExpired(refreshToken) if (!isExpired && userId) { const user = await this.userService.getById(userId) const payload = { id: user.id } const accessToken = jwt.sign(payload, jwtOptions.secretOrKey) const refreshTokenService = new RefreshTokenService(user) const refreshToken = await refreshTokenService.generateRefreshToken() response.send({ accessToken, refreshToken }) } else { throw new Error('Invalid credentials') } } catch (e) { response.status(401).send({ 'error': 'Invalid credentials' }) } } create = async (request: any, response: any) => { try { const { body } = request body.password = hashPassword(body.password) const user = await this.userService.create(body) response.status(201).send(user) } catch (error: any) { response.status(400).send({ \"error\": error.message }) } } } export default UserController GoodsController import GoodsService from '../../services/goods/Goods' import RefreshTokenService from '../../services/auth/RefreshToken' class GoodsController { private goodsService: GoodsService constructor() { this.goodsService = new GoodsService() } get = async (request: any, response: any) => { try { const goods = await this.goodsService.getById( Number(request.params.id) ) response.send(goods) } catch (error: any) { response.status(404).send({ \"error\": \"error\" }) } } create = async (request: any, response: any) => { const { body } = request try { const goods = await this.goodsService.create(body) response.status(200).send(goods) } catch (error: any) { response.status(400).send({ \"error\": \"error\" }) } } update = async (request: any, response: any) => { const refreshToken = request.headers[\"refreshtoken\"]; if (!refreshToken) { response.status(400).send({ \"error\": \"Missing refreshToken header\" }); return; } const refreshTokenService = new RefreshTokenService(); const { userId, isExpired } = await refreshTokenService.isRefreshTokenExpired(refreshToken); if(isExpired){ response.status(401).send({ \"error\": \"Unauthorized, u need new refreshToken\" }); return; } const { body } = request const id = Number(request.params.id) try { const goods = await this.goodsService.update(id, body) response.send(goods) } catch (error: any) { response.status(400).send({ \"error\": \"error\" }) } } delete = async (request: any, response: any) => { const refreshToken = request.headers[\"refreshtoken\"]; if (!refreshToken) { response.status(400).send({ \"error\": \"Missing refreshToken header\" }); return; } const refreshTokenService = new RefreshTokenService(); const { userId, isExpired } = await refreshTokenService.isRefreshTokenExpired(refreshToken); if(isExpired){ response.status(401).send({ \"error\": \"Unauthorized, u need new refreshToken\" }); return; } const id = Number(request.params.id) try { await this.goodsService.delete(id) response.status(200).send({ message: `Goods with id ${id} has been deleted` }) } catch (error: any) { response.status(400).send({ \"error\": \"error\" }) } } getCountGoods = async (request: any, response: any) => { try { const goods = await this.goodsService.getCountGoods() response.send(goods) } catch (error: any) { response.status(404).send({ \"error\": \"error\" }) } } } export default GoodsController WorkersController import RefreshTokenService from '../../services/auth/RefreshToken'; import WorkersService from '../../services/workers/Workers'; class WorkersController { private workersService: WorkersService; constructor() { this.workersService = new WorkersService(); } get = async (request: any, response: any) => { try { const worker = await this.workersService.get( Number(request.params.id) ); response.send(worker); } catch (error: any) { response.status(404).send({ \"error\": \"error\" }); } }; create = async (request: any, response: any) => { const { body } = request; try { const worker = await this.workersService.create(body); response.status(200).send(worker); } catch (error: any) { response.status(400).send({ \"error\": \"error\" }); } }; update = async (request: any, response: any) => { const refreshToken = request.headers[\"refreshtoken\"]; if (!refreshToken) { response.status(400).send({ \"error\": \"Missing refreshToken header\" }); return; } const refreshTokenService = new RefreshTokenService(); const { userId, isExpired } = await refreshTokenService.isRefreshTokenExpired(refreshToken); if (isExpired) { response.status(401).send({ \"error\": \"Unauthorized, u need new refreshToken\" }); return; } const { body } = request; const id = Number(request.params.id); try { const worker = await this.workersService.update(id, body); response.send(worker); } catch (error: any) { response.status(400).send({ \"error\": \"error\" }); } }; delete = async (request: any, response: any) => { const refreshToken = request.headers[\"refreshtoken\"]; if (!refreshToken) { response.status(400).send({ \"error\": \"Missing refreshToken header\" }); return; } const refreshTokenService = new RefreshTokenService(); const { userId, isExpired } = await refreshTokenService.isRefreshTokenExpired(refreshToken); if (isExpired) { response.status(401).send({ \"error\": \"Unauthorized, u need new refreshToken\" }); return; } const id = Number(request.params.id); try { await this.workersService.delete(id); response.status(200).send({ message: `Worker with id ${id} has been deleted` }); } catch (error: any) { response.status(400).send({ \"error\": \"error\" }); } } } export default WorkersController; \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b (routes) src/routes/users/User.ts - \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f import express from \"express\" import UserController from \"../../../controllers/users/User\" import passport from \"../../../middlewares/passport\" const router: express.Router = express.Router() const controller: UserController = new UserController() router.route('/').post(controller.post) router.route('/h').get(controller.hello) router.route('/profile').get(passport.authenticate('jwt', { session: false }), controller.me) router.route('/profile/:id').get(controller.get) router.route('/login').post(controller.auth) router.route('/refresh').post(controller.refreshToken) router.route('/create').post(controller.create) export default router src/routes/index.ts - export import express from \"express\" import userRoutes from \"./users/User\" import goodsRoutes from \"./goods/Goods\" import workersRoutes from \"./workers/Workers\" const router: express.Router = express.Router() router.use('/users', userRoutes) router.use('/goods', goodsRoutes) router.use('/workers', workersRoutes) export default router src/routes/workers/Workers.ts - \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 import express from \"express\" import WorlersController from \"../../../controllers/workers/Workers\" const router: express.Router = express.Router() const controller: WorlersController = new WorlersController() router.route('/get/:id').get(controller.get) router.route('/create').post(controller.create) router.route('/update/:id').post(controller.update) router.route('/delete/:id').post(controller.delete) export default router src/routes/goods/Goods.ts - \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0442\u043e\u0432\u0430\u0440\u043e\u0432 import express from \"express\" import GoodsController from \"../../../controllers/goods/Goods\" const router: express.Router = express.Router() const controller: GoodsController = new GoodsController() router.route('/get/:id').get(controller.get) router.route('/create').post(controller.create) router.route('/update/:id').post(controller.update) router.route('/delete/:id').post(controller.delete) router.route('/countGoods').get(controller.getCountGoods) export default router \u041f\u0440\u0438\u043c\u0435\u0440 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0414\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u0412\u044b\u0432\u043e\u0434 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d RESTful API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 express + typescript.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21162"},{"location":"lr_2/#no-2","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0412\u0430\u043c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432. \u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u044b\u043c \u043d\u0430 \u0432\u0435\u0441\u044c \u043a\u0443\u0440\u0441 \u0438 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442\u0430\u0445. \u041f\u043e \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u043c\u0443 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c RESTful API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 express + typescript (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0440\u0430\u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 boilerplate). \u0412\u0430\u0440\u0438\u0430\u043d\u0442 4: \u0421\u0430\u0439\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u0412\u0445\u043e\u0434 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0423\u0447\u0451\u0442 \u0442\u043e\u0432\u0430\u0440\u0430 \u043d\u0430 \u0441\u043a\u043b\u0430\u0434\u0435 \u0413\u0440\u0430\u0444\u0438\u043a\u0438 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u043c \u0442\u0435\u0445 \u0438\u043b\u0438 \u0438\u043d\u044b\u0445 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u043c\u0438","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u2116 2"},{"location":"lr_2/#src","text":"configs - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. controllers - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. core - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u044f\u0434\u0440\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 Express. index.ts - \u0442\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. middlewares - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Passport.js. migrations - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. models - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432, \u0442\u043e\u0432\u0430\u0440\u043e\u0432. providers - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044f\u043c\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. routes - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0443\u0440\u0441\u0430 API, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. seeders - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0444\u0430\u0439\u043b\u044b \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. services - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0443\u0436\u0431\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043b\u0443\u0436\u0431\u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f, \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432, \u0442\u043e\u0432\u0430\u0440\u043e\u0432. utils - \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0443\u0442\u0438\u043b\u0438\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0442\u0438\u043b\u0438\u0442\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438 \u0445\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0440\u043e\u043b\u0435\u0439. . \u251c\u2500\u2500 configs \u2502 \u2514\u2500\u2500 db.mjs \u251c\u2500\u2500 controllers \u2502 \u251c\u2500\u2500 goods \u2502 \u2502 \u2514\u2500\u2500 Goods.ts \u2502 \u251c\u2500\u2500 users \u2502 \u2502 \u2514\u2500\u2500 User.ts \u2502 \u2514\u2500\u2500 workers \u2502 \u2514\u2500\u2500 Workers.ts \u251c\u2500\u2500 core \u2502 \u2514\u2500\u2500 index.ts \u251c\u2500\u2500 index.ts \u251c\u2500\u2500 middlewares \u2502 \u2514\u2500\u2500 passport.ts \u251c\u2500\u2500 migrations \u251c\u2500\u2500 models \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2514\u2500\u2500 RefreshToken.ts \u2502 \u251c\u2500\u2500 goods \u2502 \u2502 \u2514\u2500\u2500 Goods.ts \u2502 \u251c\u2500\u2500 users \u2502 \u2502 \u2514\u2500\u2500 User.ts \u2502 \u2514\u2500\u2500 workers \u2502 \u2514\u2500\u2500 Workers.ts \u251c\u2500\u2500 providers \u2502 \u2514\u2500\u2500 db.ts \u251c\u2500\u2500 routes \u2502 \u2514\u2500\u2500 v1 \u2502 \u251c\u2500\u2500 goods \u2502 \u2502 \u2514\u2500\u2500 Goods.ts \u2502 \u251c\u2500\u2500 index.ts \u2502 \u251c\u2500\u2500 users \u2502 \u2502 \u2514\u2500\u2500 User.ts \u2502 \u2514\u2500\u2500 workers \u2502 \u2514\u2500\u2500 Workers.ts \u251c\u2500\u2500 seeders \u251c\u2500\u2500 services \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u2514\u2500\u2500 RefreshToken.ts \u2502 \u251c\u2500\u2500 goods \u2502 \u2502 \u2514\u2500\u2500 Goods.ts \u2502 \u251c\u2500\u2500 users \u2502 \u2502 \u2514\u2500\u2500 User.ts \u2502 \u2514\u2500\u2500 workers \u2502 \u2514\u2500\u2500 Workers.ts \u2514\u2500\u2500 utils \u251c\u2500\u2500 checkPassword.ts \u2514\u2500\u2500 hashPassword.ts","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 src"},{"location":"lr_2/#_1","text":"User.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f import { AllowNull, BeforeCreate, BeforeUpdate, Column, Model, Table, Unique } from 'sequelize-typescript' import hashPassword from '../../utils/hashPassword' @Table class User extends Model { @AllowNull(false) @Column firstName: string @AllowNull(false) @Column lastName: string @Unique @Column email: string @AllowNull(false) @Column password: string @BeforeCreate @BeforeUpdate static generatePasswordHash(instance: User) { const { password } = instance if (instance.changed('password')) { instance.password = hashPassword(password) } } } export default User RefreshToken.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432 import { Table, Column, Model, Unique, AllowNull, ForeignKey } from 'sequelize-typescript' import User from '../users/User' @Table class RefreshToken extends Model { @Unique @AllowNull(false) @Column token: string @ForeignKey(() => User) @Column userId: number } export default RefreshToken Workers.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 import { AllowNull, Column, Model, Table, Unique } from 'sequelize-typescript'; @Table class Worker extends Model { @AllowNull(false) @Unique @Column passport: string; @AllowNull(false) @Column name: string; @AllowNull(false) @Column position: string; @AllowNull(false) @Column salary: number; } export default Worker; Goods.ts - \u043c\u043e\u0434\u0435\u043b\u044c \u0442\u043e\u0432\u0430\u0440\u043e\u0432 import { AllowNull, Column, Model, Table, Unique } from 'sequelize-typescript' @Table class Goods extends Model { @AllowNull(false) @Unique @Column articul: string @AllowNull(false) @Column count: number @AllowNull(false) @Column name: string } export default Goods","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"lr_2/#c","text":"src/services/users/User.ts import User from '../../models/users/User' import sequelize from '../../providers/db' import checkPassword from '../../utils/checkPassword' const userRepository = sequelize.getRepository(User) class UserService { async getById(id: number): Promise<User> { const user = await userRepository.findOne({ where: { 'id': id } }) if (user) return user throw new Error(`User with id ${id} not found`) } async create(userData: Partial<User>): Promise<User> { try { const user = await userRepository.create(userData) return user.toJSON() } catch (e: any) { const errors = e.errors.map((error: any) => error.message) throw console.log(errors) } } async checkPassword(email: string, password: string): Promise<any> { const user = await userRepository.findOne({ where: { 'email' : email } }) if (user) return { user: user.toJSON(), checkPassword: checkPassword(user.dataValues, password) } throw console.log('Incorrect login/password!') } } export default UserService src/services/auth/RefreshToken.ts import { randomUUID } from \"crypto\" import dotenv from \"dotenv\" import RefreshToken from '../../models/auth/RefreshToken' import User from '../../models/users/User' dotenv.config() class RefreshTokenService { private user: User | null constructor(user: User | null = null) { this.user = user } generateRefreshToken = async (): Promise<string> => { const token = randomUUID() const userId = this.user?.id await RefreshToken.create({ token, userId }) return token } isRefreshTokenExpired = async (token: string): Promise<{ userId: number | null, isExpired: boolean }> => { const refreshToken = await RefreshToken.findOne({ where: { token } }) if (refreshToken) { const tokenData = refreshToken.toJSON() const currentDate = new Date() const timeDelta = currentDate.getTime() - tokenData.createdAt.getTime() if (timeDelta > 0 && timeDelta < parseInt(process.env.REFRESH_TOKEN_LIFETIME!)) { return { userId: tokenData.userId, isExpired: false } } return { userId: null, isExpired: true } } return { userId: null, isExpired: true } } } export default RefreshTokenService src/services/goods/Goods.ts import Goods from '../../models/goods/Goods' import sequelize from '../../providers/db' const goodsRepository = sequelize.getRepository(Goods) class GoodsService { async getById(id: number): Promise<Goods> { const goods = await goodsRepository.findOne({ where: { 'articul': id } }) if (goods) return goods throw new Error(`Goods with id ${id} not found`) } async create(goodsData: Partial<Goods>): Promise<Goods> { try { const goods = await goodsRepository.create(goodsData) return goods.toJSON() } catch (e: any) { const errors = e.errors.map((error: any) => error.message) throw console.log(errors) } } async update(id: number, goodsData: Partial<Goods>): Promise<Goods> { try { const goods = await goodsRepository.findOne({ where: { 'articul': id } }) if (goods) { await goods.update(goodsData) return goods.toJSON() } throw new Error(`Goods with id ${id} not found`) } catch (e: any) { const errors = e.errors.map((error: any) => error.message) throw console.log(errors) } } async delete(id: number): Promise<void> { const goods = await goodsRepository.findOne({ where: { 'articul': id } }) if (goods) { await goods.destroy() return } throw new Error(`Goods with id ${id} not found`) } async getCountGoods(): Promise<any> { const result = await goodsRepository.findAll({ attributes: ['name', [sequelize.fn('SUM', sequelize.col('count')), 'total_count']], group: ['name'] }); return result; } } export default GoodsService src/services/workers/Workers.ts import Worker from '../../models/workers/Workers'; import sequelize from '../../providers/db'; const workersRepository = sequelize.getRepository(Worker); class WorkersService { async get(id: number): Promise<Worker> { const worker = await workersRepository.findOne({ where: { 'id': id } }); if (worker) return worker throw new Error(`Worker with id ${id} not found`); } async create(workerData: Partial<Worker>): Promise<Worker> { try { const worker = await workersRepository.create(workerData); return worker.toJSON(); } catch (e: any) { const errors = e.errors.map((error: any) => error.message); throw console.log(errors); } } async update(id: number, workerData: Partial<Worker>): Promise<Worker> { try { const worker = await workersRepository.findOne({ where: { id } }); if (worker) { await worker.update(workerData); return worker.toJSON(); } throw new Error(`Worker with id ${id} not found`); } catch (e: any) { const errors = e.errors.map((error: any) => error.message); throw console.log(errors); } } async delete(id: number): Promise<void> { const worker = await workersRepository.findOne({ where: { id } }); if (worker) { await worker.destroy(); return; } throw new Error(`Worker with id ${id} not found`); } } export default WorkersService;","title":"C\u0435\u0440\u0432\u0438\u0441\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438"},{"location":"lr_2/#_2","text":"UserController import jwt from 'jsonwebtoken' import { jwtOptions } from '../../middlewares/passport' import RefreshTokenService from '../../services/auth/RefreshToken' import UserService from '../../services/users/User' import hashPassword from '../../utils/hashPassword' class UserController { private userService: UserService constructor() { this.userService = new UserService() } get = async (request: any, response: any) => { try { const user = await this.userService.getById( Number(request.params.id) ) response.send(user) } catch (error: any) { response.status(404).send({ \"error\": error.message }) } } post = async (request: any, response: any) => { const { body } = request try { const user = await this.userService.create(body) response.status(201).send(user) } catch (error: any) { response.status(400).send({ \"error\": error.message }) } } me = async (request: any, response: any) => { response.send(request.user) } hello = async (request: any, response: any) => { const html = '<html><body><h1>Hello World!</h1></body></html>'; response.send(html) } auth = async (request: any, response: any) => { const { body } = request const { email, password } = body try { const { user, checkPassword } = await this.userService.checkPassword(email, password) if (checkPassword) { const payload = { id: user.id } console.log('payload is', payload) const accessToken = jwt.sign(payload, jwtOptions.secretOrKey) const refreshTokenService = new RefreshTokenService(user) const refreshToken = await refreshTokenService.generateRefreshToken() response.send({ 'Answer' : `You successfully logged in as ${user.firstName} ${user.lastName}`, accessToken, refreshToken }) } else { throw new Error('Login or password is incorrect!') } } catch (e: any) { response.status(401).send({ \"error\": e.message }) } } refreshToken = async (request: any, response: any) => { const { body } = request const { refreshToken } = body const refreshTokenService = new RefreshTokenService() try { const { userId, isExpired } = await refreshTokenService .isRefreshTokenExpired(refreshToken) if (!isExpired && userId) { const user = await this.userService.getById(userId) const payload = { id: user.id } const accessToken = jwt.sign(payload, jwtOptions.secretOrKey) const refreshTokenService = new RefreshTokenService(user) const refreshToken = await refreshTokenService.generateRefreshToken() response.send({ accessToken, refreshToken }) } else { throw new Error('Invalid credentials') } } catch (e) { response.status(401).send({ 'error': 'Invalid credentials' }) } } create = async (request: any, response: any) => { try { const { body } = request body.password = hashPassword(body.password) const user = await this.userService.create(body) response.status(201).send(user) } catch (error: any) { response.status(400).send({ \"error\": error.message }) } } } export default UserController GoodsController import GoodsService from '../../services/goods/Goods' import RefreshTokenService from '../../services/auth/RefreshToken' class GoodsController { private goodsService: GoodsService constructor() { this.goodsService = new GoodsService() } get = async (request: any, response: any) => { try { const goods = await this.goodsService.getById( Number(request.params.id) ) response.send(goods) } catch (error: any) { response.status(404).send({ \"error\": \"error\" }) } } create = async (request: any, response: any) => { const { body } = request try { const goods = await this.goodsService.create(body) response.status(200).send(goods) } catch (error: any) { response.status(400).send({ \"error\": \"error\" }) } } update = async (request: any, response: any) => { const refreshToken = request.headers[\"refreshtoken\"]; if (!refreshToken) { response.status(400).send({ \"error\": \"Missing refreshToken header\" }); return; } const refreshTokenService = new RefreshTokenService(); const { userId, isExpired } = await refreshTokenService.isRefreshTokenExpired(refreshToken); if(isExpired){ response.status(401).send({ \"error\": \"Unauthorized, u need new refreshToken\" }); return; } const { body } = request const id = Number(request.params.id) try { const goods = await this.goodsService.update(id, body) response.send(goods) } catch (error: any) { response.status(400).send({ \"error\": \"error\" }) } } delete = async (request: any, response: any) => { const refreshToken = request.headers[\"refreshtoken\"]; if (!refreshToken) { response.status(400).send({ \"error\": \"Missing refreshToken header\" }); return; } const refreshTokenService = new RefreshTokenService(); const { userId, isExpired } = await refreshTokenService.isRefreshTokenExpired(refreshToken); if(isExpired){ response.status(401).send({ \"error\": \"Unauthorized, u need new refreshToken\" }); return; } const id = Number(request.params.id) try { await this.goodsService.delete(id) response.status(200).send({ message: `Goods with id ${id} has been deleted` }) } catch (error: any) { response.status(400).send({ \"error\": \"error\" }) } } getCountGoods = async (request: any, response: any) => { try { const goods = await this.goodsService.getCountGoods() response.send(goods) } catch (error: any) { response.status(404).send({ \"error\": \"error\" }) } } } export default GoodsController WorkersController import RefreshTokenService from '../../services/auth/RefreshToken'; import WorkersService from '../../services/workers/Workers'; class WorkersController { private workersService: WorkersService; constructor() { this.workersService = new WorkersService(); } get = async (request: any, response: any) => { try { const worker = await this.workersService.get( Number(request.params.id) ); response.send(worker); } catch (error: any) { response.status(404).send({ \"error\": \"error\" }); } }; create = async (request: any, response: any) => { const { body } = request; try { const worker = await this.workersService.create(body); response.status(200).send(worker); } catch (error: any) { response.status(400).send({ \"error\": \"error\" }); } }; update = async (request: any, response: any) => { const refreshToken = request.headers[\"refreshtoken\"]; if (!refreshToken) { response.status(400).send({ \"error\": \"Missing refreshToken header\" }); return; } const refreshTokenService = new RefreshTokenService(); const { userId, isExpired } = await refreshTokenService.isRefreshTokenExpired(refreshToken); if (isExpired) { response.status(401).send({ \"error\": \"Unauthorized, u need new refreshToken\" }); return; } const { body } = request; const id = Number(request.params.id); try { const worker = await this.workersService.update(id, body); response.send(worker); } catch (error: any) { response.status(400).send({ \"error\": \"error\" }); } }; delete = async (request: any, response: any) => { const refreshToken = request.headers[\"refreshtoken\"]; if (!refreshToken) { response.status(400).send({ \"error\": \"Missing refreshToken header\" }); return; } const refreshTokenService = new RefreshTokenService(); const { userId, isExpired } = await refreshTokenService.isRefreshTokenExpired(refreshToken); if (isExpired) { response.status(401).send({ \"error\": \"Unauthorized, u need new refreshToken\" }); return; } const id = Number(request.params.id); try { await this.workersService.delete(id); response.status(200).send({ message: `Worker with id ${id} has been deleted` }); } catch (error: any) { response.status(400).send({ \"error\": \"error\" }); } } } export default WorkersController;","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b"},{"location":"lr_2/#routes","text":"src/routes/users/User.ts - \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f import express from \"express\" import UserController from \"../../../controllers/users/User\" import passport from \"../../../middlewares/passport\" const router: express.Router = express.Router() const controller: UserController = new UserController() router.route('/').post(controller.post) router.route('/h').get(controller.hello) router.route('/profile').get(passport.authenticate('jwt', { session: false }), controller.me) router.route('/profile/:id').get(controller.get) router.route('/login').post(controller.auth) router.route('/refresh').post(controller.refreshToken) router.route('/create').post(controller.create) export default router src/routes/index.ts - export import express from \"express\" import userRoutes from \"./users/User\" import goodsRoutes from \"./goods/Goods\" import workersRoutes from \"./workers/Workers\" const router: express.Router = express.Router() router.use('/users', userRoutes) router.use('/goods', goodsRoutes) router.use('/workers', workersRoutes) export default router src/routes/workers/Workers.ts - \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u043d\u0438\u043a\u043e\u0432 import express from \"express\" import WorlersController from \"../../../controllers/workers/Workers\" const router: express.Router = express.Router() const controller: WorlersController = new WorlersController() router.route('/get/:id').get(controller.get) router.route('/create').post(controller.create) router.route('/update/:id').post(controller.update) router.route('/delete/:id').post(controller.delete) export default router src/routes/goods/Goods.ts - \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0442\u043e\u0432\u0430\u0440\u043e\u0432 import express from \"express\" import GoodsController from \"../../../controllers/goods/Goods\" const router: express.Router = express.Router() const controller: GoodsController = new GoodsController() router.route('/get/:id').get(controller.get) router.route('/create').post(controller.create) router.route('/update/:id').post(controller.update) router.route('/delete/:id').post(controller.delete) router.route('/countGoods').get(controller.getCountGoods) export default router","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b (routes)"},{"location":"lr_2/#_3","text":"\u0414\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0414\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lr_2/#_4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d RESTful API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 express + typescript.","title":"\u0412\u044b\u0432\u043e\u0434"}]}